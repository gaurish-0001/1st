#!/usr/bin/env python3

# Import Dependencies
import rospy 
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
from turtlesim.msg import Pose
import time 
from math import radians, pi

class TurtlesimStraightsAndTurns:
    def _init_(self):

        # Initialize class variables
        self.last_distance = 0
        self.goal_distance = 0
        self.dist_goal_active = False
        self.forward_movement = True
       
        self.goal_angle = 0
        self.last_angle = 0
        self.angle_goal_active = False
        self.rotate_clockwise = True

        # Initialize the node
        rospy.init_node('turtlesim_straights_and_turns_node', anonymous=True)

        # Initialize subscribers  
        rospy.Subscriber("/turtle_dist", Float64, self.distance_callback)
        rospy.Subscriber("/goal_angle", Float64, self.goal_angle_callback)
        rospy.Subscriber("/goal_distance", Float64, self.goal_distance_callback)
        rospy.Subscriber("/turtle1/pose", Pose, self.pose_callback)

        # Initialize publishers
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

        # Initialize a timer. The timer callback will act as our main function
        timer_period = 0.01
        rospy.Timer(rospy.Duration(timer_period), self.timer_callback)

        # Printing to the terminal, ROS style
        rospy.loginfo("Initialized node!")
        
        # This blocking function call keeps python from exiting until node is stopped
        rospy.spin()

    def pose_callback(self, msg):
        pass
         
    def distance_callback(self, msg):
        self.last_distance = msg.data

    def goal_angle_callback(self, msg):
        self.goal_angle = msg.data
        self.angle_goal_active = True if self.goal_angle !=0 else False
        self.rotate_clockwise  = True if self.goal_angle < 0 else False

    def goal_distance_callback(self, msg):
        # Set goal_distance, dist_goal_active and forward_movement variables here
        self.goal_distance = msg.data
        self.dist_goal_active = True if self.goal_distance != 0 else False
        self.forward_movement = True if self.goal_distance > 0 else False

    def timer_callback(self, msg):
        # If a goal is active, first check if the goal is reached (it's OK if the goal is not perfectly reached)
        if self.dist_goal_active:
            if self.forward_movement:
                if self.last_distance >= self.goal_distance:
                    # Stop the turtle
                    self.velocity_publisher.publish(Twist())
                    self.dist_goal_active = False
            else:
                if self.goal_distance <= self.last_distance:
                    # Stop the turtle
                    self.velocity_publisher.publish(Twist())
                    self.dist_goal_active = False

            # Then publish a cmd_vel message to move the turtle
            vel_msg = Twist()
            vel_msg.linear.x = self.goal_distance
            self.velocity_publisher.publish(vel_msg)

        elif self.angle_goal_active:
            if self.rotate_clockwise:
                 if self.last_angle >= self.goal_angle:
                    self.velocity_publisher.publish(Twist())
                    self.angle_goal_active = False
            else:
                if self.last_angle <= self.goal_angle:
                    self.velocity_publisher.publish(Twist())
                    self.angle_goal_active = False
                
            vel_msg = Twist()
            vel_msg.angular.z = radians(self.goal_angle)
            self.velocity_publisher.publish(vel_msg)

if _name_ == '_main_': 
    
    try: 
        turtlesim_straights_and_turns_class_instance = TurtlesimStraightsAndTurns()
    except rospy.ROSInterruptException: 
        pass
#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
from turtlesim.msg import Pose
import math

class TurtlesimStraightsAndTurns:
    def _init_(self):
        # Initialize class variables
        self.square_side_length = 5.0  # Side length of the square arena
        self.min_x = -self.square_side_length / 2
        self.max_x = self.square_side_length / 2
        self.min_y = -self.square_side_length / 2
        self.max_y = self.square_side_length / 2

        self.last_distance = 0
        self.goal_distance = 0
        self.dist_goal_active = False
        self.forward_movement = True

        self.goal_angle = 0
        self.last_angle = 0
        self.angle_goal_active = False
        self.rotate_…
#!/usr/bin/env python3

import rospy 
from geometry_msgs.msg import Twist, Pose
from turtlesim.msg import Pose as TurtlePose
from math import atan2, pi, sqrt

class TurtlesimNavigator:
    def _init_(self):
        self.current_pose = None
        self.goal_pose = None

        # Initialize the node
        rospy.init_node('turtlesim_navigator', anonymous=True)

        # Initialize subscribers  
        rospy.Subscriber("/turtle1/pose", TurtlePose, self.pose_callback)

        # Initialize publishers
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

        # Initialize a timer. The timer callback will act as our main function
        timer_period = 0.01
        rospy.Timer(rospy.Duration(timer_period), self.timer_…
root@himanshusherap-desktop:/code/catkin_ws/src/sit310/packages/goal_seeek_pkg/src# rostopic pub /goal_pose turtlesim/Pose "x: 5.0, y: 5.0, theta: 0.0 linear_velocity: 0.0, angular_velocity: 0.0 "
Usage: rostopic pub /topic type [args...]

rostopic: error: Argument error: mapping values are not allowed here
  in "<unicode string>", line 1, column 10:
    x: 5.0, y: 5.0, theta: 0.0 linear_velocit ... 
             ^
rostopic pub /goal_pose turtlesim/Pose '{x: 5.0, y: 5.0, theta: 0.0, linear_velocity: 0.0, angular_velocity: 0.0}'
rostopic pub /goal_pose geometry_msgs/Pose '{position: {x: 5.0, y: 5.0, z: 0.0}, orientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}'
def goal_seek_callback(self, msg):
    # Extract the desired goal position and velocities from the received message
    self.goal_pose = Pose()
    self.goal_pose.x = msg.x
    self.goal_pose.y = msg.y

    # Extract linear and angular velocities if available
    if hasattr(msg, 'linear_velocity'):
        self.linear_velocity = msg.linear_velocity
    if hasattr(msg, 'angular_velocity'):
        self.angular_velocity = msg.angular_velocity
#!/usr/bin/env python3

import rospy 
from geometry_msgs.msg import Twist, Pose
from turtlesim.msg import Pose as TurtlePose
from math import atan2, pi, sqrt

class TurtlesimNavigator:
    def _init_(self):
        self.current_pose = None
        self.goal_pose = None
        self.linear_velocity = 0.0
        self.angular_velocity = 0.0

        # Initialize the node
        rospy.init_node('turtlesim_navigator', anonymous=True)

        # Initialize subscribers  
        rospy.Subscriber("/turtle1/pose", TurtlePose, self.pose_callback)
        rospy.Subscriber("/goal_seek", Pose, self.goal_seek_callback)

        # Initialize publishers
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

        # Initialize a timer. The timer callback will act as our main function
        timer_period = 0.01
        rospy.Timer(rospy.Duration(timer_period), self.timer_callback)

        rospy.loginfo("Initialized node!")
        rospy.spin()

    def pose_callback(self, msg):
        self.current_pose = msg

    def goal_seek_callback(self, msg):
        # Extract the desired goal position and velocities from the received message
        self.goal_pose = Pose()
        self.goal_pose.x = msg.x
        self.goal_pose.y = msg.y

        # Extract linear and angular velocities if available
        if hasattr(msg, 'linear_velocity'):
            self.linear_velocity = msg.linear_velocity
        if hasattr(msg, 'angular_velocity'):
            self.angular_velocity = msg.angular_velocity

    def timer_callback(self, event):
        if self.current_pose and self.goal_pose:
            # Calculate linear velocity (distance to goal)
            linear_speed = self.linear_velocity  # Adjust as needed
            distance_to_goal = sqrt((self.goal_pose.x - self.current_pose.x)*2 + (self.goal_pose.y - self.current_pose.y)*2)

            # Calculate angular velocity (angle to goal)
            angular_speed = self.angular_velocity  # Adjust as needed
            angle_to_goal = atan2(self.goal_pose.y - self.current_pose.y, self.goal_pose.x - self.current_pose.x)

            # Calculate the difference between the current orientation and the angle to goal
            angle_difference = angle_to_goal - self.current_pose.theta

            # Ensure the angle difference is within the range [-pi, pi]
            if angle_difference > pi:
                angle_difference -= 2 * pi
            elif angle_difference < -pi:
                angle_difference += 2 * pi

            # Set the linear velocity
            vel_msg = Twist()
            vel_msg.linear.x = linear_speed if distance_to_goal > 0.1 else 0.0

            # Set the angular velocity
            vel_msg.angular.z = angular_speed * angle_difference

            # Publish the velocity command
            self.velocity_publisher.publish(vel_msg)

            # Check if goal is reached
            if distance_to_goal <= 0.1:
                rospy.loginfo("Goal reached!")
                # Stop the turtle
                vel_msg.linear.x = 0.0
                vel_msg.angular.z = 0.0
                self.velocity_publisher.publish(vel_msg)

if _name_ == '_main_':
    try: 
        TurtlesimNavigator()
    except rospy.ROSInterruptException: 
        pass
rostopic pub /goal_seek geometry_msgs/Pose '{position: {x: 2.0, y: 2.0, z: 0.0}, orientation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}'
def goal_seek_callback(self, msg):
    self.goal_pose = msg.position  # Extracting position from Pose message

def timer_callback(self, msg):
    # Calculate distance to goal
    distance_to_goal = sqrt((self.goal_pose.x - self.current_pose.x)*2 + (self.goal_pose.y - self.current_pose.y)*2)
[ERROR] [1712919586.043900]: bad callback: <bound method TurtlesimStraightsAndTurns.goal_position_callback of <_main_.TurtlesimStraightsAndTurns object at 0xffffa65527f0>>
Traceback (most recent call last):
  File "/opt/ros/noetic/lib/python3/dist-packages/rospy/topics.py", line 750, in _invoke_callback
    cb(msg)
  File "goal_seek.py", line 54, in goal_position_callback
    dx = msg.x - self.last_x
AttributeError: 'TurtlesimStraightsAndTurns' object has no attribute 'last_x'
rostopic pub /goal_x std_msgs/Float64 "data: 5.0"
rostopic pub /goal_y std_msgs/Float64 "data: 8.0"
rostopic pub /goal_angle std_msgs/Float64 "data: 1.57"  # 90 degrees in radians
#!/usr/bin/env python3

# Import Dependencies
import rospy 
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
from turtlesim.msg import Pose
import time 
from math import atan2, sqrt, pi

class TurtlesimStraightsAndTurns:
    def _init_(self):

        # Initialize class variables
        self.current_x = 0
        self.current_y = 0
        self.current_theta = 0

        self.goal_x = 0
        self.goal_y = 0
        self.goal_theta = 0

        self.dist_goal_active = False
        self.angle_goal_active = False

        # Initialize the node
        rospy.init_node('turtlesim_straights_and_turns_node', anonymous=True)

        # Initialize subscribers  
        rospy.Subscriber("/turtle1/pose", Pose, self.pose_callback)
        rospy.Subscriber("/goal_pose", Pose, self.goal_pose_callback)

        # Initialize publishers
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)

        # Initialize a timer. The timer callback will act as our main function
        timer_period = 0.01
        rospy.Timer(rospy.Duration(timer_period), self.timer_callback)

        # Printing to the terminal, ROS style
        rospy.loginfo("Initialized node!")
        
        # This blocking function call keeps python from exiting until node is stopped
        rospy.spin()

    def pose_callback(self, msg):
        self.current_x = msg.x
        self.current_y = msg.y
        self.current_theta = msg.theta

    def goal_pose_callback(self, msg):
        self.goal_x = msg.x
        self.goal_y = msg.y
        self.goal_theta = msg.theta

        # Set goal active flags
        self.dist_goal_active = True
        self.angle_goal_active = True if abs(self.goal_theta - self.current_theta) > 0.01 else False

    def timer_callback(self, msg):
        if self.dist_goal_active:
            # Calculate distance to goal
            distance_to_goal = sqrt((self.goal_x - self.current_x) * 2 + (self.goal_y - self.current_y) * 2)

            # Move towards the goal only if it's within the arena
            if 0 <= self.goal_x <= 11 and 0 <= self.goal_y <= 11:
                # Calculate angle to goal
                angle_to_goal = atan2(self.goal_y - self.current_y, self.goal_x - self.current_x)

                # Calculate angle difference
                angle_difference = angle_to_goal - self.current_theta

                # Normalize angle difference to [-pi, pi]
                if angle_difference > pi:
                    angle_difference -= 2 * pi
                elif angle_difference < -pi:
                    angle_difference += 2 * pi

                # Set linear velocity based on distance to goal
                linear_velocity = min(distance_to_goal, 1.0)

                # Set angular velocity based on angle difference
                angular_velocity = angle_difference

                # Publish velocity commands
                vel_msg = Twist()
                vel_msg.linear.x = linear_velocity
                vel_msg.angular.z = angular_velocity
                self.velocity_publisher.publish(vel_msg)
            else:
                rospy.loginfo("Goal position is outside the arena!")

            # Check if goal reached
            if distance_to_goal < 0.1:
                rospy.loginfo("Goal reached!")
                self.dist_goal_active = False

        if self.angle_goal_active:
            # Calculate angle difference
            angle_difference = self.goal_theta - self.current_theta

            # Normalize angle difference to [-pi, pi]
            if angle_difference > pi:
                angle_difference -= 2 * pi
            elif angle_difference < -pi:
                angle_difference += 2 * pi

            # Set angular velocity based on angle difference
            angular_velocity = angle_difference

            # Publish angular velocity command
            vel_msg = Twist()
            vel_msg.angular.z = angular_velocity
            self.velocity_publisher.publish(vel_msg)

            # Check if goal angle reached
            if abs(angle_difference) < 0.01:
                rospy.loginfo("Goal angle reached!")
                self.angle_goal_active = False

if _name_ == '_main_': 
    try: 
        turtlesim_straights_and_turns_class_instance = TurtlesimStraightsAndTurns()
    except rospy.ROSInterruptException: 
        pass
INFO] [1712921727.192291]: Initialized node!
Exception in thread Thread-6:
Traceback (most recent call last):
  File "/usr/lib/python3.8/threading.py", line 932, in _bootstrap_inner
    self.run()
  File "/opt/ros/noetic/lib/python3/dist-packages/rospy/timer.py", line 237, in run
    self._callback(TimerEvent(last_expected, last_real, current_expected, current_real, last_duration))
  File "goal_seek.py", line 63, in timer_callback
    distance_to_goal = sqrt((self.goal_x - self.current_x) * 2 + (self.goal_y - self.current_y) * 2)
ValueError: math domain error
